// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Academia {
  id            Int      @id @default(autoincrement())
  nome_academia String
  telefone      String
  cnpj          String

  admin         admin?    @relation(fields: [admin_id], references: [id]) 
  admin_id      String?  @unique
  professor_id  Professor[]
  aluno_id      aluno[]
  matricula matricula[]
}


model Professor {
  id        Int      @id @default(autoincrement())
  nome String
  email String
  telefone String
  nascimento String
  sexo String
  cpf String
  endereco String
  role Role @relation(fields: [role_id], references: [id])
  role_id Int
   academia Academia @relation(fields: [academia_id], references: [id])
  academia_id Int
  
}


model admin {
  id          String     @id
  email       String
  nome_admin  String
  role        Role       @relation(fields: [role_id], references: [id])
  role_id     Int
  academia    Academia?  // Relação opcional, pois um admin pode não estar associado a nenhuma academia ainda
}

model aluno {
  email String
  id        Int      @id @default(autoincrement())
  nome String
   role Role @relation(fields: [role_id], references: [id])
  role_id Int
   academia Academia @relation(fields: [academia_id], references: [id])
  academia_id Int
   estado_civil_id   Int?        
  estadoCivil     EstadoCivil?  @relation(fields: [estado_civil_id], references: [id])
  sexo_id Int?
  sexo sexo? @relation(fields: [sexo_id], references: [id])
  
  contato contato[]
  endereco endereco?

  matricula matricula?
 
 
}
model Role {
  id        Int      @id @default(autoincrement())
  role_name String
  professor_id Professor[]
  admin_id admin[]
  aluno_id aluno[]
}

model contato {
  id Int @id @default(autoincrement())
  telefone String
   iswpp Boolean
  aluno aluno @relation(fields: [aluno_id], references: [id])
  aluno_id Int
}

model EstadoCivil {
  id          Int      @id @default(autoincrement())
  name   String
  alunos      aluno[]   
}

model sexo {
  id          Int      @id @default(autoincrement())
  sexo   String
  alunos aluno[]
  
}




model endereco {
  id          Int      @id @default(autoincrement())
 cidade String
 rua String
 bairro String
  aluno aluno @relation(fields: [aluno_id], references: [id])
  aluno_id Int @unique
}


model plano {
    id          Int      @id @default(autoincrement())
    plano String
    plano_price String
    matricula matricula[]
}

model matricula {
    id          Int      @id @default(autoincrement())
    aluno aluno @relation(fields: [aluno_id], references: [id])
    aluno_id Int @unique

    academia Academia @relation(fields: [academia_id], references: [id])
    academia_id Int 

    plano plano @relation(fields: [plano_id], references: [id])
    plano_id Int 

    inicio DateTime 
    status Boolean

    cobrancas cobranca[]
}

model cobranca {
   id          Int      @id @default(autoincrement())
   data DateTime
   data_vencimento DateTime
 
   matricula matricula @relation(fields: [matricula_id], references: [id])
   matricula_id Int 
  status Cobranca_Status @default(ABERTA)
  preco Float
}


enum Cobranca_Status {
  PAGO
  ABERTA
  VENCIDA
}